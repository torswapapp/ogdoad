import type { components as gcComponents } from '/generated/groundcontrol';
import type { components } from '/generated/harmony';

export type ErrorResult = components['schemas']['ErrorResult'];
export type SimulationResult = components['schemas']['SimulationResult'];
export type EVMSimulationResult = components['schemas']['EVMSimulationResult'];
export type EVMSimulationInput = components['schemas']['EVMSimulationInput'];
export type EVMMessageSimulationInput = components['schemas']['EVMMessageSimulationInput'];
export type FeeOptionKind = components['schemas']['FeeOptionKind'];
export type SimulationInput = components['schemas']['SimulationInput'];
export type ResolvedAddressLabels = components['schemas']['ResolvedAddressLabels'];
export type ReceiveAsset = components['schemas']['ReceiveAsset'];
export type SendAsset = components['schemas']['SendAsset'];
export type Transaction = components['schemas']['Transaction'];
export type TransactionEffect = components['schemas']['TransactionEffect'];
export type DeFiProtocol = components['schemas']['DeFiProtocol'];
export type NFT = components['schemas']['NFT'];
export type NFTMetadata = components['schemas']['NFTMetadata'];
export type TokenListsResult =
  components['schemas']['Result__tokenCount-TokenCountType--whitelist-AggregatedTokenListType-Array--blacklist-AggregatedTokenListType-Array--__'];
export type TokenMetadata = components['schemas']['TokenMetadata'];
export type InternalBalance = components['schemas']['InternalBalance'];
export type EVMFeeOption = components['schemas']['EVMFeeOption'];
export type EVMFeeOptionPre1559 = components['schemas']['EVMFeeOptionPre1559'];
export type EVMFeeOption1559 = components['schemas']['EVMFeeOption1559'];
export type SolanaSimulationInput = components['schemas']['SolanaSimulationInput'];
export type SolanaSimulationResult = components['schemas']['SolanaSimulationResult'];
export type TokenReputation = components['schemas']['TokenReputation'];
export type FeeOption = components['schemas']['FeeOption'];
export type SolanaFeeOption = components['schemas']['SolanaFeeOption'];
export type BaseFeeOption = components['schemas']['DefaultFeeOption'];
export type TokenApproval = components['schemas']['TokenApproval'];
export type AnalyseAddressResult = components['schemas']['AnalyseAddressResult'];
export type AnalyseUrlResult = components['schemas']['AnalyseUrlResult'];
export type AddressAnalysisWarning = components['schemas']['AddressAnalysisWarning'];
export type ExploreResponse = components['schemas']['Result_ExploreContentRow-Array_'];
export type ExploreContentRow = components['schemas']['ExploreContentRow'];
export type ExploreHeroContent = components['schemas']['ExploreHeroContent'];
export type ExploreHeroVariant = components['schemas']['ExploreHeroVariant'];
export type ExploreCardSize = components['schemas']['ExploreCardSize'];
export type ExploreCardContent = components['schemas']['ExploreCardContent'];
export type ExploreListItemContent = components['schemas']['ExploreListItemContent'];
export type ExploreListContent = components['schemas']['ExploreListContent'];
export type ExploreListIconVariant = components['schemas']['ExploreListIconVariant'];
export type ExploreTextContent = components['schemas']['ExploreTextContent'];
export type ExploreLink = components['schemas']['ExploreLink'];
export type TokenConfigurationType = gcComponents['schemas']['TokenConfigurationType'];
export type SwapFromTokenListResult = components['schemas']['SwapFromTokenListResult'];
export type SwapToTokenListResult = components['schemas']['SwapToTokenListResult'];
export type SwapQuoteRouteType = components['schemas']['SwapQuoteRouteType'];
export type SwapQuoteRequest = components['schemas']['SwapQuoteRequest'];
export type SwapQuoteAsset = components['schemas']['SwapQuoteAsset'];
export type SwapQuoteResult = components['schemas']['SwapQuote'];
export type SwapRouteFee = components['schemas']['SwapRouteFee'];
export type SwapRouteProvider = components['schemas']['SwapRouteProvider'];
export type SwapRouteTXStep = components['schemas']['SwapRouteTXStep'];
export type SwapRoute = components['schemas']['SwapRoute'];
export type TokenType = components['schemas']['TokenType'];
export type TokenDict = components['schemas']['TokenDict'];
